// Code generated by go-bindata.
// sources:
// css/style.css
// templates/404.html
// templates/error.html
// templates/index.html
// templates/layout.html
// templates/preview.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6e\xdb\x38\x10\xbe\xeb\x29\x06\x30\x02\xec\x06\x96\x23\x39\x6b\x6f\x43\x1f\x7b\xe9\xa1\xe8\x21\x68\x7b\x1f\x89\x23\x89\x30\x45\xaa\x43\xda\x72\x12\xf8\xdd\x0b\xca\xa2\x9c\xda\x0e\x50\xc1\x17\xcf\x0c\xf5\xfd\xcc\x47\x15\x56\xbe\xc0\x5b\x02\x50\x60\xb9\xad\xd9\xee\x8c\x14\x30\x5b\xae\x8b\x4d\x02\x50\x5a\x6d\x59\x40\xdf\x28\x4f\xe1\x7f\x65\x8d\x4f\x2b\x6c\x95\x7e\x11\xf0\x93\x58\xa2\xc1\x39\x7c\x21\xbd\x27\xaf\x4a\x9c\x83\x43\xe3\x52\x47\xac\xaa\x69\xdc\xa9\x57\x12\x90\xaf\x3b\xbf\x49\x8e\x89\x54\xfb\x45\x87\x35\x0d\x90\xa7\xa7\x45\xae\x95\x11\x80\x3b\x6f\x37\x53\xf5\x16\x9d\x38\x7f\x48\x7b\x25\x7d\x23\xe0\x71\x49\xed\xb9\xd1\xa1\x94\xca\xd4\x02\xfe\xeb\x0e\x01\x6b\xd1\x10\x4a\x62\x68\xf2\x01\x6d\x14\x33\xab\xaa\x81\x5c\x84\x5d\x86\xe1\x91\xeb\x1e\x59\xa1\xf1\x02\x5c\x8b\x5a\xa7\x25\x76\xee\x4a\xf6\xa4\xce\xd3\xc1\xa7\xae\x41\x69\x7b\x01\x5c\x17\xf8\x4f\x36\x87\xf1\xb7\x58\xfd\x0b\x19\x64\x8b\x7c\x45\x87\x40\x27\x39\x26\x81\x05\x14\x96\x25\x71\x5a\x58\xef\x6d\x3b\x60\x83\xb3\x5a\x49\x98\x65\xd9\xb2\x5c\xe5\x1b\x38\x26\x8b\xca\x5a\x4f\x3c\x70\x1e\x30\x50\xab\xda\x08\x60\x55\x37\xfe\xaf\xa8\x9e\x2c\xff\x7f\x75\x17\x5c\x40\x78\x9b\xa4\x7f\x2a\xab\x80\xa0\xda\x7a\xe2\x22\x20\xeb\x0e\xc7\x44\x99\x6e\xe7\xe1\x6d\x74\x25\xd5\x54\xf9\x93\x35\xb1\xe2\x6d\x27\x20\xa7\x76\x2a\x44\x0d\xa1\x36\x9e\x9f\xb9\x5d\xd1\xaa\xf0\x9a\x4a\x5b\xf4\x91\xf2\xd5\x2b\x8e\x89\xc6\x82\x74\x98\x0b\x74\x7b\x0a\x63\x02\x0a\xab\x65\xa0\xd7\x3c\xc6\xce\x98\x9d\x65\x76\x17\xea\x95\x22\x2d\x1d\xf9\x77\xdc\xdf\x19\xb8\x7a\xa2\x30\x14\x02\x46\xcc\x96\x2f\x42\x9d\x46\x0f\xca\xf5\x3a\x18\x35\x85\x25\xa7\xc3\x2d\xe3\xe0\xc2\x8a\x53\xd0\x22\x6e\x7e\xc6\x7d\xca\xb2\x18\xec\xd2\x1a\x4f\xc6\x0f\xc8\x97\x9a\x93\x63\xf2\x70\x0f\xdf\x1b\x02\xd7\x58\xf6\x64\x48\xc2\x8f\xe7\xaf\x60\x0d\x74\x4c\x7b\x45\x3d\x0c\xf7\xe2\xfe\x21\xe9\x16\x3b\xd6\x57\xeb\x2f\xc9\x78\xe2\xf7\xc9\x1d\x98\x47\xeb\xe3\x91\xf1\x66\xe4\x59\x76\x77\x26\x9c\x32\x4a\xb5\x73\xd3\x91\x13\x82\xeb\xd0\x4c\x50\x52\xb9\x4e\xe3\x8b\x80\x42\xdb\x72\x7b\xcb\xa1\x0f\x3c\x3f\x0b\xb3\xac\x6a\x65\x50\x7f\xa4\x6b\xc0\x63\x92\x8a\xa9\xf4\x11\x77\x5a\xcb\xf0\x5c\x6e\xe2\x24\xe2\x8f\xfb\xf7\xd9\xee\x58\x11\xc3\x37\xea\xe7\xd0\x5a\x63\x5d\x87\xe5\xf0\x75\xba\x96\x70\x76\x6a\xd8\x5e\x6f\x59\xa6\x3d\x63\x27\xa0\x60\xc2\x6d\x1a\x0a\x53\x63\x28\xc5\x0e\x6a\x3d\x2a\x7b\x0e\xe9\x81\xd2\xb2\x21\x76\x41\x46\xfc\x84\xcd\x61\xca\xda\x1c\x62\x36\x4f\xc5\x5f\x3c\x87\x1b\x1e\xdf\x5a\x06\x40\xda\xda\xd7\xf4\x83\x56\x4f\xc5\x56\xf9\x9b\xdd\x63\xf2\x3b\x00\x00\xff\xff\x3c\xa4\x41\xd5\xbb\x05\x00\x00")

func cssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_cssStyleCss,
		"css/style.css",
	)
}

func cssStyleCss() (*asset, error) {
	bytes, err := cssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/style.css", size: 1467, mode: os.FileMode(420), modTime: time.Unix(1489260434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x0a\x03\x21\x10\x85\xe1\xde\x53\x0c\x1e\x60\x85\xad\x07\x8b\x90\x22\x65\x8a\x5c\x40\x98\xd9\x28\x6c\xd4\xe8\x48\x08\x32\x77\x0f\x29\x96\xad\xdf\xf7\xfe\x39\x89\xb7\x94\x19\xec\x8d\x03\x59\x55\x94\x24\x3b\xfb\x39\x97\x6b\x79\x85\x94\x55\xa1\xc7\xd2\x64\xb4\x1d\xdd\xb1\x71\x26\x55\x63\xce\xf3\xa5\xd0\xd7\xaa\x1a\x8c\xab\xbf\x87\x27\x43\x2e\x02\x5b\x19\x99\xd0\xc5\xd5\x1b\xac\xfe\x11\x19\x1a\xbf\x07\x77\x61\x82\xfa\x47\x9f\xd0\x4f\xb8\xa0\xab\xde\x1c\xed\x5f\x00\x00\x00\xff\xff\xb6\x64\x1e\x7f\x98\x00\x00\x00")

func templates404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates404Html,
		"templates/404.html",
	)
}

func templates404Html() (*asset, error) {
	bytes, err := templates404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/404.html", size: 152, mode: os.FileMode(420), modTime: time.Unix(1489433046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xf2\x48\x4d\x4c\x51\xaa\xad\xb5\x29\xc9\x2c\xc9\x49\xb5\xab\xae\xd6\x73\xc9\xcf\x4d\xcc\xcc\xab\xad\x55\x28\xce\xc8\x2f\x2a\x29\x2d\xca\xb1\x52\x00\x89\x26\x96\x24\xea\xb9\x16\x15\xe5\x17\x85\x80\x14\xd6\xd6\xda\xe8\xc3\x74\xa4\xe6\xa5\xd4\xd6\x72\x71\x21\x8c\x74\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\xc9\x30\xb2\xc3\xae\x35\xc3\xc8\x8e\xcb\xa6\x00\x55\xd2\x37\xb5\xb8\x38\x31\x1d\x2c\x5d\x60\xc7\x05\x33\x16\x10\x00\x00\xff\xff\x54\xd6\x79\x4e\xa9\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 169, mode: os.FileMode(420), modTime: time.Unix(1489509212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\xae\xd4\x30\x10\x44\xf7\x39\x45\xd3\x07\x18\x0b\x96\xc8\xce\x02\x3e\x88\x05\x2b\x10\x07\xe8\x19\x77\x26\x2d\x39\x76\x64\x77\x46\x7f\x14\xf9\xee\xc8\xf9\x09\xf9\x12\xab\x24\x95\x72\xd5\x73\xad\xab\xe7\x41\x22\x03\xfe\x60\xf2\x58\xab\x55\xd1\xc0\xfd\xba\x5e\x5e\xd2\x44\x12\x6b\x85\x32\xa6\xac\xf0\xe7\xd7\xcf\x62\xcd\xf1\x97\xa3\xaf\xb5\xeb\xce\xe3\x5f\x92\x7f\x62\xad\xdd\xba\xca\x00\x97\x17\x52\xba\x7c\xcb\x39\xe5\x5a\x3b\xeb\xe5\x01\xb7\x40\xa5\x38\xe4\xa6\x61\xdf\x01\xd8\xb9\xff\x9a\x99\x54\xe2\x1d\x74\xe4\xb3\x05\x06\x92\xc0\xfe\xb3\x35\xf3\xe6\x5b\x42\x7b\x00\xd8\x20\x1b\xd6\xbb\x68\x6b\x82\x6c\x1e\xd3\x4c\xd6\x78\x79\xf4\xdd\x3f\x38\x3b\xa4\x3c\x81\x78\x87\x5b\xf6\x92\x03\x02\xdd\x54\x52\x74\x68\xc8\x7b\x83\x30\xb1\x8e\xc9\x3b\x9c\x53\xd1\x8d\x6a\x5d\x77\xf8\x5b\xc9\xc3\x77\xe1\xe0\xa1\xd6\xd6\x30\xb4\xf7\xc2\x7a\xb0\xf0\x9d\xa3\xef\x7f\xb7\x60\x8e\x40\x0d\xdc\x9a\x5d\xdd\x2d\x74\xe5\x00\x43\xca\x0e\x5b\x75\xff\xe6\x68\xe2\x6e\x90\x38\x2f\xba\xf1\x6d\x68\xfa\x9c\xd9\xa1\xf2\xab\x22\x44\x9a\x78\x97\x1f\x14\x16\x76\x88\x30\x07\xba\xf1\x98\x82\xe7\xec\x70\xa6\xa2\x0c\xcf\xb4\x64\x08\x29\xde\xb7\xdd\x46\xce\x8c\xa0\x74\x95\xe8\xf9\xd5\xe1\x47\x34\xff\x35\x95\xe5\x3a\x89\x1e\x65\xc7\xd7\xde\x71\xdc\x66\xc9\xe1\xc3\xfb\xa0\x4f\x6f\x41\xd6\x9c\x23\x58\xd3\xc6\x3d\xc7\xfe\x1b\x00\x00\xff\xff\x06\xd7\x2f\x4a\x48\x02\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 584, mode: os.FileMode(420), modTime: time.Unix(1489432762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcf\x6e\xe3\x20\x10\xc6\xef\x79\x8a\x09\xda\xe3\xda\xde\xdc\x56\x2b\x88\xf6\x4f\x56\xea\xad\x3d\xf4\xd2\x23\x81\x71\x40\xc5\x60\xc1\xd8\xa9\x65\xf9\xdd\x2b\xdb\x8d\xe3\xa8\x0d\x07\x34\xf0\xcd\xcc\xc7\x6f\x04\xdf\x1e\x1e\xff\x3d\xbf\x3c\xfd\x07\x43\x95\xdb\xf3\x71\x07\x27\xfd\x49\x30\xf4\x6c\xbf\x01\xe0\x06\xa5\x1e\x83\x71\xf1\x0a\x49\x82\x32\x32\x26\x24\xc1\x1a\x2a\xb3\x9f\xec\x56\xf4\xb2\x42\xc1\x5a\x8b\xe7\x3a\x44\x62\xa0\x82\x27\xf4\x24\xd8\xd9\x6a\x32\x42\x63\x6b\x15\x66\xd3\xe1\x3b\x58\x6f\xc9\x4a\x97\x25\x25\x1d\x8a\x5d\xfe\xe3\xda\xcc\x59\xff\x0a\x11\x9d\x60\x89\x3a\x87\xc9\x20\x12\x03\x13\xb1\x14\xac\x48\x24\xc9\xaa\x62\x52\x72\x95\xd2\x52\xd6\xf7\x84\x55\xed\x24\x21\xb0\x07\x94\x9a\xc1\xb7\x61\x18\x29\x8a\x0b\x06\x3f\x06\xdd\xcd\xe9\x5c\xdb\x16\x94\x93\x29\x09\x56\xcb\x13\x5e\xcd\xb7\x59\x06\x63\x01\x46\xc8\xb2\xe5\x76\x95\x3e\x8b\x4b\xc1\x38\xa6\xdd\xbe\xef\x9b\xba\xc6\x08\xf9\x21\x54\xd2\xfa\x61\x80\x64\x42\x24\x68\xa2\x4b\xbc\x30\xbb\xa5\x51\xa1\x6d\x7b\xe3\x35\xa6\x5f\x26\x75\xc7\xf1\x43\x5d\x59\xae\x59\xff\x06\xdd\x5d\x58\xbf\xb6\x28\x43\xa0\xbb\x38\xb3\xb8\xea\xfd\xe7\xd8\x24\x9c\x5e\x24\x15\xfd\x9a\x39\x9a\xe8\x7e\x77\x6f\x79\x69\xf3\xcf\x26\x4b\xc8\x8b\x79\xbe\xbc\x98\x3e\xd4\xe6\x3d\x00\x00\xff\xff\x52\x98\x87\x41\x61\x02\x00\x00")

func templatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutHtml,
		"templates/layout.html",
	)
}

func templatesLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.html", size: 609, mode: os.FileMode(420), modTime: time.Unix(1489432444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPreviewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xcd\x0e\xda\x30\x10\x84\xef\x79\x8a\x91\x55\xb8\x91\x04\x54\x7a\x00\x13\xa9\x15\x87\x22\x51\xa9\xe2\xe7\x54\xf5\xe0\x62\x87\x58\x0a\x71\x64\x2f\xd0\xca\xda\x77\xaf\x12\x12\xaa\x9e\x6c\x79\xd6\xdf\xcc\xee\xc6\xa8\x4d\x69\x1b\x03\xf1\xd5\x28\x2d\x98\x25\x59\xaa\x4d\x11\x63\xba\x75\x37\x65\x1b\x66\x84\xca\x79\xc2\xf9\xb0\x0f\x32\x1b\x55\xd3\x68\xe6\x24\xf9\xf7\xfd\x8b\xd3\x7f\x04\x73\x22\xb5\x7d\xe0\x52\xab\x10\x36\xe2\xee\x6b\x01\xab\xfb\xcb\x2f\xf7\x5b\x14\x09\x00\xc8\xb6\x38\x76\x44\xd3\x18\xdd\x51\x65\xd6\xbe\x85\xfe\x04\x62\x7c\x5a\xaa\xf0\xa1\x77\xbe\xfb\x1a\xab\x0d\x5a\x6f\x1b\x2a\x21\x26\x61\x12\xb2\x49\x10\x48\xbf\x7b\x47\xee\xe2\x6a\x0c\x51\x91\x6e\x15\xa9\xf4\xbc\xdb\x82\x79\x20\x01\x52\xa1\xf2\xa6\xdc\x88\x18\xdf\x3c\x66\x51\x4c\x6b\x5a\xff\xf7\x34\xbd\xd2\x5a\x66\x6a\x6c\x0e\x3f\x62\x1c\x88\x27\xe5\xaf\x86\x06\x13\xe6\x9f\xaf\xb4\x5d\x6c\x99\x69\xfb\x28\x92\x57\xf2\x53\x65\x03\x9e\x2a\xa0\xb4\x3e\x10\x94\xd6\x46\x23\x46\x94\xce\xdf\x14\x91\xbd\x99\x81\xf7\xb9\x57\xc4\x22\xcf\x3f\xcd\xf2\xf9\x2c\x5f\x60\xbe\x5c\xe5\x1f\x57\xf9\x12\xdf\x8e\x27\x01\xe6\x34\xe9\xf1\x03\x78\x47\xf0\x46\x5b\x6f\x2e\x14\x40\x0e\x54\x19\xd4\xae\xb9\x76\x16\xde\x84\x90\x00\x32\xb4\xaa\x19\xe7\x3e\x16\x77\xf3\x2f\xde\x5d\x9c\x0f\x7b\x30\xcb\xac\xab\x2c\x5e\xfc\x71\x8f\x7f\x03\x00\x00\xff\xff\x05\xfa\x19\x84\x06\x02\x00\x00")

func templatesPreviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPreviewHtml,
		"templates/preview.html",
	)
}

func templatesPreviewHtml() (*asset, error) {
	bytes, err := templatesPreviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/preview.html", size: 518, mode: os.FileMode(420), modTime: time.Unix(1489433951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/style.css": cssStyleCss,
	"templates/404.html": templates404Html,
	"templates/error.html": templatesErrorHtml,
	"templates/index.html": templatesIndexHtml,
	"templates/layout.html": templatesLayoutHtml,
	"templates/preview.html": templatesPreviewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{cssStyleCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{templates404Html, map[string]*bintree{}},
		"error.html": &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"layout.html": &bintree{templatesLayoutHtml, map[string]*bintree{}},
		"preview.html": &bintree{templatesPreviewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

