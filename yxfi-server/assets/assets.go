// Code generated by go-bindata.
// sources:
// css/style.css
// templates/404.html
// templates/error.html
// templates/index.html
// templates/layout.html
// templates/preview.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6e\xdb\x38\x10\xbe\xeb\x29\x06\x30\x02\xec\x06\x96\x23\x39\x6b\x6f\x43\x1f\x7b\xe9\xa1\xe8\x21\x68\x7b\x1f\x89\x23\x89\x30\x45\xaa\x43\xda\x72\x12\xf8\xdd\x0b\xca\xa2\x9c\xda\x0e\x50\xc1\x17\xcf\x0c\xf5\xfd\xcc\x47\x15\x56\xbe\xc0\x5b\x02\x50\x60\xb9\xad\xd9\xee\x8c\x14\x30\x5b\xae\x8b\x4d\x02\x50\x5a\x6d\x59\x40\xdf\x28\x4f\xe1\x7f\x65\x8d\x4f\x2b\x6c\x95\x7e\x11\xf0\x93\x58\xa2\xc1\x39\x7c\x21\xbd\x27\xaf\x4a\x9c\x83\x43\xe3\x52\x47\xac\xaa\x69\xdc\xa9\x57\x12\x90\xaf\x3b\xbf\x49\x8e\x89\x54\xfb\x45\x87\x35\x0d\x90\xa7\xa7\x45\xae\x95\x11\x80\x3b\x6f\x37\x53\xf5\x16\x9d\x38\x7f\x48\x7b\x25\x7d\x23\xe0\x71\x49\xed\xb9\xd1\xa1\x94\xca\xd4\x02\xfe\xeb\x0e\x01\x6b\xd1\x10\x4a\x62\x68\xf2\x01\x6d\x14\x33\xab\xaa\x81\x5c\x84\x5d\x86\xe1\x91\xeb\x1e\x59\xa1\xf1\x02\x5c\x8b\x5a\xa7\x25\x76\xee\x4a\xf6\xa4\xce\xd3\xc1\xa7\xae\x41\x69\x7b\x01\x5c\x17\xf8\x4f\x36\x87\xf1\xb7\x58\xfd\x0b\x19\x64\x8b\x7c\x45\x87\x40\x27\x39\x26\x81\x05\x14\x96\x25\x71\x5a\x58\xef\x6d\x3b\x60\x83\xb3\x5a\x49\x98\x65\xd9\xb2\x5c\xe5\x1b\x38\x26\x8b\xca\x5a\x4f\x3c\x70\x1e\x30\x50\xab\xda\x08\x60\x55\x37\xfe\xaf\xa8\x9e\x2c\xff\x7f\x75\x17\x5c\x40\x78\x9b\xa4\x7f\x2a\xab\x80\xa0\xda\x7a\xe2\x22\x20\xeb\x0e\xc7\x44\x99\x6e\xe7\xe1\x6d\x74\x25\xd5\x54\xf9\x93\x35\xb1\xe2\x6d\x27\x20\xa7\x76\x2a\x44\x0d\xa1\x36\x9e\x9f\xb9\x5d\xd1\xaa\xf0\x9a\x4a\x5b\xf4\x91\xf2\xd5\x2b\x8e\x89\xc6\x82\x74\x98\x0b\x74\x7b\x0a\x63\x02\x0a\xab\x65\xa0\xd7\x3c\xc6\xce\x98\x9d\x65\x76\x17\xea\x95\x22\x2d\x1d\xf9\x77\xdc\xdf\x19\xb8\x7a\xa2\x30\x14\x02\x46\xcc\x96\x2f\x42\x9d\x46\x0f\xca\xf5\x3a\x18\x35\x85\x25\xa7\xc3\x2d\xe3\xe0\xc2\x8a\x53\xd0\x22\x6e\x7e\xc6\x7d\xca\xb2\x18\xec\xd2\x1a\x4f\xc6\x0f\xc8\x97\x9a\x93\x63\xf2\x70\x0f\xdf\x1b\x02\xd7\x58\xf6\x64\x48\xc2\x8f\xe7\xaf\x60\x0d\x74\x4c\x7b\x45\x3d\x0c\xf7\xe2\xfe\x21\xe9\x16\x3b\xd6\x57\xeb\x2f\xc9\x78\xe2\xf7\xc9\x1d\x98\x47\xeb\xe3\x91\xf1\x66\xe4\x59\x76\x77\x26\x9c\x32\x4a\xb5\x73\xd3\x91\x13\x82\xeb\xd0\x4c\x50\x52\xb9\x4e\xe3\x8b\x80\x42\xdb\x72\x7b\xcb\xa1\x0f\x3c\x3f\x0b\xb3\xac\x6a\x65\x50\x7f\xa4\x6b\xc0\x63\x92\x8a\xa9\xf4\x11\x77\x5a\xcb\xf0\x5c\x6e\xe2\x24\xe2\x8f\xfb\xf7\xd9\xee\x58\x11\xc3\x37\xea\xe7\xd0\x5a\x63\x5d\x87\xe5\xf0\x75\xba\x96\x70\x76\x6a\xd8\x5e\x6f\x59\xa6\x3d\x63\x27\xa0\x60\xc2\x6d\x1a\x0a\x53\x63\x28\xc5\x0e\x6a\x3d\x2a\x7b\x0e\xe9\x81\xd2\xb2\x21\x76\x41\x46\xfc\x84\xcd\x61\xca\xda\x1c\x62\x36\x4f\xc5\x5f\x3c\x87\x1b\x1e\xdf\x5a\x06\x40\xda\xda\xd7\xf4\x83\x56\x4f\xc5\x56\xf9\x9b\xdd\x63\xf2\x3b\x00\x00\xff\xff\x3c\xa4\x41\xd5\xbb\x05\x00\x00")

func cssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_cssStyleCss,
		"css/style.css",
	)
}

func cssStyleCss() (*asset, error) {
	bytes, err := cssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/style.css", size: 1467, mode: os.FileMode(420), modTime: time.Unix(1489260434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x0a\x03\x21\x10\x85\xe1\xde\x53\x0c\x7b\x80\x15\xb6\x1e\x2c\x52\xa5\x4c\x91\x0b\x08\x33\x46\x61\x51\xa3\x23\xc9\x22\x73\xf7\x10\x12\xd8\xf6\xf1\xbd\x7f\x4e\xe2\x90\x32\xc3\x72\x65\x4f\x8b\x2a\x4a\x92\x9d\xdd\xf1\x5e\x43\x82\x1e\x4b\x93\xd1\x76\xb4\xbf\x75\x4e\xce\xa4\x6a\xcc\x79\xbb\x14\x3a\x16\x55\x83\x71\x73\x37\xff\x60\xc8\x45\x20\x94\x91\x09\x6d\xdc\x9c\xc1\xea\xee\x91\xa1\xf1\x73\x70\x17\x26\xa8\x5f\xf4\xf2\xfd\x84\x2b\xda\xea\xcc\xbf\xfd\x09\x00\x00\xff\xff\xde\x8f\x38\x8b\x91\x00\x00\x00")

func templates404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates404Html,
		"templates/404.html",
	)
}

func templates404Html() (*asset, error) {
	bytes, err := templates404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/404.html", size: 145, mode: os.FileMode(420), modTime: time.Unix(1489350036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xf2\x48\x4d\x4c\x51\xaa\xad\xb5\x29\xc9\x2c\xc9\x49\xb5\xab\xac\xd0\x4b\xcb\x54\x28\xce\xc8\x2f\x2a\x29\x2d\xca\xb1\x52\xa8\xae\xd6\x73\x2d\x2a\xca\x2f\x0a\x01\xc9\xd6\xd6\xda\xe8\x43\x94\x55\x57\xa7\xe6\xa5\xd4\xd6\x72\x71\x21\xcc\x71\xca\x4f\xa9\x54\xaa\xad\xe5\xb2\xc9\x30\xb2\xc3\xd0\x95\x61\x64\xc7\x65\x53\x00\x17\xf7\x4d\x2d\x2e\x4e\x4c\x07\xcb\x14\xd8\x71\x41\x0d\x03\x04\x00\x00\xff\xff\x13\x6e\xde\xbe\x93\x00\x00\x00")

func templatesErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesErrorHtml,
		"templates/error.html",
	)
}

func templatesErrorHtml() (*asset, error) {
	bytes, err := templatesErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/error.html", size: 147, mode: os.FileMode(420), modTime: time.Unix(1489351622, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xc1\xae\xdb\x20\x10\xbc\xfb\x2b\xb6\xfb\x01\x41\xed\xb1\x02\x1f\x5a\xb5\xea\xa1\xa7\x56\xfd\x00\x12\x96\x78\x25\x02\x16\xac\xa3\x44\x88\x7f\xaf\x70\xec\xe7\x27\xbd\x13\x30\x3b\xcc\xcc\x4e\xad\x8e\x3c\x47\x02\xfc\x45\xd6\x61\x6b\x5a\x58\x02\x8d\xcf\xc7\xc9\x33\x94\x29\x65\x81\x7f\x7f\x7e\x17\xad\x5e\x78\xad\x14\x5d\x6b\xc3\x70\x7c\xfc\x96\xdc\x13\x5b\x1b\x6a\x65\x0f\xa7\x1f\x39\xa7\xdc\xda\xa0\x1d\xdf\xe1\x12\x6c\x29\x06\xa9\x63\x38\x0e\x00\x7a\x1e\xbf\x67\xb2\xc2\xf1\x0a\x32\xd1\x61\x00\xde\x72\x20\xf7\x55\xab\x79\xe5\x2d\xa1\x1f\x00\x3a\xf0\x58\xeb\xae\xaa\x55\xe0\x75\xac\xfa\x5c\x2b\xc7\xf7\x71\x78\x8b\xa4\x7d\xca\x37\x60\x67\x70\x95\x5d\x72\x40\xb0\x17\xe1\x14\x0d\x2a\xeb\x9c\x42\xb8\x91\x4c\xc9\x19\x9c\x53\x91\x35\x50\xad\x70\xba\x94\xec\x7f\x32\x05\x07\xad\x75\x71\xdf\xef\x85\x64\x4f\x40\x57\x8a\x6e\xfc\xdb\x35\x29\x82\xed\x71\xb5\xda\xd0\x8d\x62\xcf\x14\xc0\xa7\x6c\xb0\xbb\x8e\x2f\x46\x07\x37\x02\xc7\x79\x91\x35\xda\x9a\x4a\x9e\x33\x19\x14\x7a\x08\x42\xb4\x37\xda\xe0\xbb\x0d\x0b\x19\x44\x98\x83\xbd\xd0\x94\x82\xa3\x6c\x70\xb6\x45\x08\x9e\x69\xc9\x10\x52\xbc\xae\x6d\x4d\x94\x09\x41\xec\x99\xa3\xa3\x87\xc1\xcf\xa8\x3e\x38\x95\xe5\x7c\x63\xd9\xcd\xf6\xd7\xe6\xb1\x6f\xb3\xe4\xf0\xe9\xbd\xd0\x97\x97\x90\x56\x47\x09\x5a\xf5\x5e\x8f\x9e\xff\x07\x00\x00\xff\xff\xfe\x41\xdb\x95\x33\x02\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 563, mode: os.FileMode(420), modTime: time.Unix(1489351832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6f\xeb\x20\x10\xbc\xe7\x57\x6c\xd0\x3b\x3e\xdb\x2f\xb7\xa7\x0a\xa2\x7e\xab\x3d\xb5\x87\x1e\x9a\x23\x81\x75\x40\xc5\x10\xc1\xda\xa9\x15\xe5\xbf\x57\xb6\x1b\xc7\x51\x1b\x0e\x68\x61\x76\x76\x98\x11\x7c\x7e\xff\x72\xf7\xb6\x7a\x7d\x00\x43\x95\x5b\xf2\x6e\x07\x27\xfd\x46\x30\xf4\x6c\x39\x03\xe0\x06\xa5\xee\x8a\x6e\xf1\x0a\x49\x82\x32\x32\x26\x24\xc1\x6a\x2a\xb3\xff\xec\x1c\xf4\xb2\x42\xc1\x1a\x8b\xbb\x6d\x88\xc4\x40\x05\x4f\xe8\x49\xb0\x9d\xd5\x64\x84\xc6\xc6\x2a\xcc\xfa\xc3\x5f\xb0\xde\x92\x95\x2e\x4b\x4a\x3a\x14\x8b\xfc\xdf\x69\x98\xb3\xfe\x03\x22\x3a\xc1\x12\xb5\x0e\x93\x41\x24\x06\x26\x62\x29\x58\x91\x48\x92\x55\x45\x8f\xe4\x2a\xa5\x91\xb6\xdf\x13\x56\x5b\x27\x09\x81\x3d\xa1\xd4\x0c\xfe\x1c\x0e\x9d\x8b\xe2\x68\x83\xaf\x83\x6e\x87\x76\xae\x6d\x03\xca\xc9\x94\x04\xdb\xca\x0d\x9e\xc4\xe7\x59\x06\x1d\x01\x23\x64\xd9\x78\x3b\x69\x1f\xc0\x91\xd0\xc5\xb4\x58\xae\xde\xf3\xc7\x67\x48\x26\x44\x82\x3a\xba\xc4\x0b\xb3\x18\xc9\x85\xb6\xcd\xd9\xfc\x4a\x5a\x7f\x4c\xe7\x82\xca\x37\x3a\x91\x99\xfa\xbb\x0d\xba\x3d\xfa\xfb\x5d\xa2\x0c\x81\x2e\x5a\x18\xc0\xc9\xec\x9b\x75\x9d\xb0\x7f\x91\x54\x74\x35\xf8\xa8\xa3\xbb\x6e\x3f\xf3\xd2\xe6\x3f\x45\xc6\x92\x17\x43\xa6\xbc\xe8\x3f\xd1\xec\x2b\x00\x00\xff\xff\x0e\x3d\xa1\xf0\x55\x02\x00\x00")

func templatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutHtml,
		"templates/layout.html",
	)
}

func templatesLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.html", size: 597, mode: os.FileMode(420), modTime: time.Unix(1489350301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPreviewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x4f\x6f\xe2\x30\x10\xc5\xef\xf9\x14\x4f\x3e\x70\x23\x09\x68\xd9\x03\x18\x4b\xbb\xda\xc3\x56\xa2\x17\xfe\x9c\xaa\x1e\x5c\x3c\x49\x2c\x85\x04\xd9\x2e\x05\x59\xf3\xdd\x2b\x27\xd0\x4a\x3d\x79\xf4\xe6\xf9\xf7\x34\x2f\x46\x43\x95\xed\x08\xe2\x3f\x69\x23\x98\x65\xb0\xa1\x25\x75\xbb\xe6\x95\x85\x6f\x7a\x17\x70\xd8\x6e\xbc\x2c\x46\x3d\x46\xea\x0c\x73\x96\x7d\x7f\xfc\xdb\x9b\x9b\x60\xce\xa4\xb1\x17\x1c\x5b\xed\xfd\x5a\xbc\xbb\x56\xc0\x9a\x61\x78\xeb\xaf\x42\x65\x00\x20\xcf\x6a\x97\x88\xd4\x91\x49\x54\x59\x9c\xbf\x16\xc3\x3b\xcc\x1a\x8d\xa3\x6a\x2d\x62\x44\x7e\xd8\x6e\x76\xc1\xd9\xae\x06\xb3\x50\x93\x36\xac\x7e\xaa\x93\x3a\xac\x64\xa1\x15\x5e\xd2\x66\xaf\x5d\x4d\xe1\x5f\x7f\xd2\xb6\x03\xf3\xeb\x48\x4f\x31\xb2\x30\xf6\xa2\xb2\x31\x69\xdf\x58\x8f\x0f\xed\x51\x59\xe7\x03\xb4\x31\x64\x10\x23\xaa\xde\x9d\x74\x08\xf6\x44\xc8\xff\x0c\xa2\x98\x97\xe5\xef\x69\x39\x9b\x96\x73\xcc\x16\xcb\xf2\xd7\xb2\x5c\xe0\x79\xb7\x17\x60\xce\xb3\x81\x7c\x67\x3e\x05\x38\x32\xd6\xd1\x31\x78\x84\x1e\xa1\x21\xb4\x7d\x57\x27\xba\x23\xef\x33\x40\xfa\xb3\xee\x1e\x15\x3d\xcc\xa9\x2a\x75\xbf\x0a\xcc\xb2\x48\x26\x35\xa2\x1f\x6d\x7f\x06\x00\x00\xff\xff\x70\x53\x84\x66\xa6\x01\x00\x00")

func templatesPreviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPreviewHtml,
		"templates/preview.html",
	)
}

func templatesPreviewHtml() (*asset, error) {
	bytes, err := templatesPreviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/preview.html", size: 422, mode: os.FileMode(420), modTime: time.Unix(1489430904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/style.css": cssStyleCss,
	"templates/404.html": templates404Html,
	"templates/error.html": templatesErrorHtml,
	"templates/index.html": templatesIndexHtml,
	"templates/layout.html": templatesLayoutHtml,
	"templates/preview.html": templatesPreviewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{cssStyleCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{templates404Html, map[string]*bintree{}},
		"error.html": &bintree{templatesErrorHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"layout.html": &bintree{templatesLayoutHtml, map[string]*bintree{}},
		"preview.html": &bintree{templatesPreviewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

