// Code generated by go-bindata.
// sources:
// assets/css/style.css
// assets/templates/404.html
// assets/templates/index.html
// assets/templates/preview.html
// DO NOT EDIT!

package shorturl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6e\xdb\x38\x10\xbe\xeb\x29\x06\x30\x02\xec\x06\x96\x23\x39\x6b\x6f\x43\x1f\x7b\xe9\xa1\xe8\x21\x68\x7b\x1f\x89\x23\x89\x30\x45\xaa\x43\xda\x72\x12\xf8\xdd\x0b\xca\xa2\x9c\xda\x0e\x50\xc1\x17\xcf\x0c\xf5\xfd\xcc\x47\x15\x56\xbe\xc0\x5b\x02\x50\x60\xb9\xad\xd9\xee\x8c\x14\x30\x5b\xae\x8b\x4d\x02\x50\x5a\x6d\x59\x40\xdf\x28\x4f\xe1\x7f\x65\x8d\x4f\x2b\x6c\x95\x7e\x11\xf0\x93\x58\xa2\xc1\x39\x7c\x21\xbd\x27\xaf\x4a\x9c\x83\x43\xe3\x52\x47\xac\xaa\x69\xdc\xa9\x57\x12\x90\xaf\x3b\xbf\x49\x8e\x89\x54\xfb\x45\x87\x35\x0d\x90\xa7\xa7\x45\xae\x95\x11\x80\x3b\x6f\x37\x53\xf5\x16\x9d\x38\x7f\x48\x7b\x25\x7d\x23\xe0\x71\x49\xed\xb9\xd1\xa1\x94\xca\xd4\x02\xfe\xeb\x0e\x01\x6b\xd1\x10\x4a\x62\x68\xf2\x01\x6d\x14\x33\xab\xaa\x81\x5c\x84\x5d\x86\xe1\x91\xeb\x1e\x59\xa1\xf1\x02\x5c\x8b\x5a\xa7\x25\x76\xee\x4a\xf6\xa4\xce\xd3\xc1\xa7\xae\x41\x69\x7b\x01\x5c\x17\xf8\x4f\x36\x87\xf1\xb7\x58\xfd\x0b\x19\x64\x8b\x7c\x45\x87\x40\x27\x39\x26\x81\x05\x14\x96\x25\x71\x5a\x58\xef\x6d\x3b\x60\x83\xb3\x5a\x49\x98\x65\xd9\xb2\x5c\xe5\x1b\x38\x26\x8b\xca\x5a\x4f\x3c\x70\x1e\x30\x50\xab\xda\x08\x60\x55\x37\xfe\xaf\xa8\x9e\x2c\xff\x7f\x75\x17\x5c\x40\x78\x9b\xa4\x7f\x2a\xab\x80\xa0\xda\x7a\xe2\x22\x20\xeb\x0e\xc7\x44\x99\x6e\xe7\xe1\x6d\x74\x25\xd5\x54\xf9\x93\x35\xb1\xe2\x6d\x27\x20\xa7\x76\x2a\x44\x0d\xa1\x36\x9e\x9f\xb9\x5d\xd1\xaa\xf0\x9a\x4a\x5b\xf4\x91\xf2\xd5\x2b\x8e\x89\xc6\x82\x74\x98\x0b\x74\x7b\x0a\x63\x02\x0a\xab\x65\xa0\xd7\x3c\xc6\xce\x98\x9d\x65\x76\x17\xea\x95\x22\x2d\x1d\xf9\x77\xdc\xdf\x19\xb8\x7a\xa2\x30\x14\x02\x46\xcc\x96\x2f\x42\x9d\x46\x0f\xca\xf5\x3a\x18\x35\x85\x25\xa7\xc3\x2d\xe3\xe0\xc2\x8a\x53\xd0\x22\x6e\x7e\xc6\x7d\xca\xb2\x18\xec\xd2\x1a\x4f\xc6\x0f\xc8\x97\x9a\x93\x63\xf2\x70\x0f\xdf\x1b\x02\xd7\x58\xf6\x64\x48\xc2\x8f\xe7\xaf\x60\x0d\x74\x4c\x7b\x45\x3d\x0c\xf7\xe2\xfe\x21\xe9\x16\x3b\xd6\x57\xeb\x2f\xc9\x78\xe2\xf7\xc9\x1d\x98\x47\xeb\xe3\x91\xf1\x66\xe4\x59\x76\x77\x26\x9c\x32\x4a\xb5\x73\xd3\x91\x13\x82\xeb\xd0\x4c\x50\x52\xb9\x4e\xe3\x8b\x80\x42\xdb\x72\x7b\xcb\xa1\x0f\x3c\x3f\x0b\xb3\xac\x6a\x65\x50\x7f\xa4\x6b\xc0\x63\x92\x8a\xa9\xf4\x11\x77\x5a\xcb\xf0\x5c\x6e\xe2\x24\xe2\x8f\xfb\xf7\xd9\xee\x58\x11\xc3\x37\xea\xe7\xd0\x5a\x63\x5d\x87\xe5\xf0\x75\xba\x96\x70\x76\x6a\xd8\x5e\x6f\x59\xa6\x3d\x63\x27\xa0\x60\xc2\x6d\x1a\x0a\x53\x63\x28\xc5\x0e\x6a\x3d\x2a\x7b\x0e\xe9\x81\xd2\xb2\x21\x76\x41\x46\xfc\x84\xcd\x61\xca\xda\x1c\x62\x36\x4f\xc5\x5f\x3c\x87\x1b\x1e\xdf\x5a\x06\x40\xda\xda\xd7\xf4\x83\x56\x4f\xc5\x56\xf9\x9b\xdd\x63\xf2\x3b\x00\x00\xff\xff\x3c\xa4\x41\xd5\xbb\x05\x00\x00")

func cssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_cssStyleCss,
		"css/style.css",
	)
}

func cssStyleCss() (*asset, error) {
	bytes, err := cssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/style.css", size: 1467, mode: os.FileMode(420), modTime: time.Unix(1467572379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xb1\x6e\xeb\x30\x0c\xdc\xf3\x15\x7c\xda\x6d\x22\x79\x53\x02\xd9\x78\x6f\x29\xd0\xad\x43\x87\x76\x54\x6c\x3a\x12\xaa\x48\xae\x44\xc7\xf6\xdf\x17\xb2\x52\x37\x41\x91\x4d\xe0\xdd\xf1\x78\x38\x49\xcd\x67\x0b\xd3\xd9\xba\x58\x09\xcd\xdc\x1f\x10\xc7\x71\x2c\xc7\xbf\xa5\x0f\x27\xdc\xee\xf7\x7b\x9c\x12\x47\xd4\x1b\x00\xa9\x49\xb5\xe9\x01\x20\xd9\xb0\xa5\x7a\x9e\xca\xce\x40\xd4\x3e\xf0\x10\xac\xc4\x3c\xcd\x0c\x6b\xdc\x07\x04\xb2\x95\x88\x3c\x5b\x8a\x9a\x88\x05\xf0\xdc\x53\x25\x98\x26\xc6\x26\x46\x01\x3a\x50\x57\x09\x8c\xac\xd8\x34\xb8\x30\xcb\x04\x2c\x7e\xf8\x6d\x28\x8f\xbe\x9d\xaf\x7b\x5b\x73\x81\xc6\xaa\x18\x2b\xd1\xab\x13\x89\x3c\x06\x90\x7f\x8a\x02\x92\x80\x02\x14\xc5\x3a\xbd\xa1\x67\x70\x15\xa4\x40\xdb\xfa\xfd\xad\x7c\x7a\xce\x11\x60\x08\x36\x4a\xd4\xdb\x55\x8c\xad\xb9\xdc\xed\x3f\x2b\xe3\xa0\xf1\x8e\xc9\xf1\x03\x97\x2b\x7a\x63\x93\x8c\x76\xf5\x8b\x3a\x11\x38\xcf\xd0\xf9\xc1\xb5\x12\xf5\xee\x8e\xd1\xd7\xaf\x9a\x20\xd0\xe7\x40\x91\xa9\x85\x94\x0d\x46\x15\x7f\x24\xa5\xc4\xfe\xf1\x65\x9d\xf7\xfc\x30\x79\x06\x6f\x4e\xfa\x7f\x1c\x22\x2d\x41\x54\xc3\x87\xb5\xc1\x7f\x4b\xa1\xe5\x6f\x93\xf5\x29\x31\x57\x21\x31\x7d\x8b\x7a\xf3\x15\x00\x00\xff\xff\xf3\xdf\x3f\x52\x42\x02\x00\x00")

func templates404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates404Html,
		"templates/404.html",
	)
}

func templates404Html() (*asset, error) {
	bytes, err := templates404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/404.html", size: 578, mode: os.FileMode(420), modTime: time.Unix(1461081048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\xaf\xd3\x30\x0c\x7d\xbf\xbf\xc2\xd7\xcf\xac\x61\xf0\x74\xa7\xa4\x02\x21\xae\x84\xc4\x13\x08\x09\x1e\xb3\xc6\x5d\x23\xd2\xa4\x4a\xdc\x7d\xa8\xda\x7f\x47\x69\xbb\xad\x03\xf6\xd6\xd8\xc7\xc7\xc7\xce\x49\x65\xc3\xad\x83\x63\xeb\x7c\x52\xd8\x30\x77\x1b\x21\x0e\x87\x43\x71\x78\x5f\x84\xb8\x13\xeb\x97\x97\x17\x71\xcc\x18\x2c\x9f\x00\x64\x43\xda\xe4\x0f\x00\xd9\x12\x6b\xf0\xba\x25\x85\x7b\x4b\x87\x2e\x44\x46\xa8\x82\x67\xf2\xac\xf0\x60\x0d\x37\xca\xd0\xde\x56\xb4\x1a\x0f\x6f\xc0\x7a\xcb\x56\xbb\x55\xaa\xb4\x23\xb5\x2e\xde\xe2\x4c\xc5\x96\x1d\x95\xa7\x63\x51\x5b\x48\x4d\x88\x0c\x3f\xbe\x7d\x4d\x52\x4c\xf1\x09\xe3\xac\xff\x0d\x91\x9c\xc2\xc4\x27\x47\xa9\x21\x62\x04\x3e\x75\xa4\x90\xe9\xc8\xa2\x4a\x09\xa1\x89\x54\x2b\x14\x89\x35\xdb\x4a\x8c\xc8\x22\x27\x46\xf1\xe2\xa2\x5e\x6e\x83\x39\xcd\xbc\xc6\xee\xa1\x72\x3a\x25\x85\x9d\xde\xd1\x2c\x09\x40\x3e\xaf\x56\x90\x0b\x28\xc2\x6a\x75\x8d\x2e\xe0\x53\xf2\x5a\x90\xb7\xb3\x2e\x7f\xfd\x2c\x5e\xbf\x48\xd1\xac\xaf\x15\xc2\xd8\xfd\x1d\x69\xab\xad\xbf\x2c\xea\x01\xf5\x9c\xc5\xf2\x69\x4e\x0e\x83\xad\xa1\xf8\x1c\x63\x88\xe7\xf3\x7f\x0a\x28\x67\x96\x52\xba\xf2\x53\x24\xcd\xd6\xef\x80\x1b\xba\x6d\x15\x6a\x6d\x1d\x99\x8d\x14\xdd\x02\xdd\xbb\xdb\x61\xdc\x75\x39\x0c\x97\x6e\x52\x38\xbb\x80\x8a\x1b\xf6\x6e\xb4\x61\x20\x6f\xce\xe7\x49\xb0\xac\x43\x6c\xc1\x1a\x85\x63\xe3\x3e\x3a\x04\x5d\xb1\x0d\x5e\xa1\xd0\xc6\x08\x84\x96\xb8\x09\x46\x61\x17\x12\x2f\x84\x0f\x03\x14\x55\x8a\xf5\xab\x25\x67\xe0\x3a\x6b\xa6\xcc\x91\x44\x7c\xaf\x94\x76\xe4\x4d\xf9\x3d\x77\x21\x0f\x3a\x8f\x28\xc5\x1c\xbd\x03\xea\x2d\x39\xa8\x43\x54\x98\xd5\x94\x13\x2e\x07\xef\x60\xd6\x77\x3d\x8f\xc2\x47\xcd\x37\x7b\xe1\x6c\xf5\x31\xbc\xd7\xae\x27\x85\x08\x9d\xd3\x15\x35\xc1\x19\x8a\xd9\x3e\x89\x09\x4e\xa1\x8f\xe0\x82\xdf\x8d\xdb\x6e\x28\x12\x02\xeb\xad\xf5\x86\x8e\x0a\xd7\x28\x1e\xf4\x4b\xfd\xb6\xb5\x57\x47\x5f\x4e\x73\xa7\xcb\x7c\x7d\x74\xcf\x4b\xba\x77\x4b\x3a\x29\xfe\x5e\x91\x14\xf9\x1e\x1e\x3b\xb1\x0e\x81\x1f\xda\x7b\x4a\x2e\xae\xe6\xe3\xb6\x4f\x34\x1a\x57\x57\xbc\x81\xcb\xcd\x7e\x18\xdf\x6d\xf1\x6f\x93\xeb\xa7\x14\xd3\x7b\x93\x22\xff\x48\xca\xa7\x3f\x01\x00\x00\xff\xff\xac\x8c\x9e\x38\x74\x04\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1140, mode: os.FileMode(420), modTime: time.Unix(1467572250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPreviewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x70\x3a\xf4\x66\xcb\xe9\xd6\x01\x4d\x15\x63\x05\x86\x01\x05\xba\x4b\x93\x02\x1b\x86\x1d\x14\x8b\xb1\x85\xc9\x96\x21\x31\xb5\x83\xc0\xff\x7d\x90\xbf\x9a\xb4\xe8\x8d\xe6\x23\xf5\xf8\xc8\x67\x51\x50\x69\xa0\x2d\x4d\xe5\xd7\xac\x20\xaa\x57\x9c\x37\x4d\x13\x37\x9f\x63\xeb\x72\xbe\xbc\xbd\xbd\xe5\x6d\xa8\x61\xe9\x02\x40\x14\x28\x55\x08\x00\x04\x69\x32\x98\x1e\xdb\x78\xaf\xc1\x17\xd6\xd1\xc1\x19\xc1\x87\xec\x50\x61\x74\xf5\x0f\x1c\x9a\x35\xf3\x74\x34\xe8\x0b\x44\x62\x40\xc7\x1a\xd7\x8c\xb0\x25\x9e\x79\xcf\xa0\x70\xb8\x5f\x33\xee\x49\x92\xce\x78\x5f\x19\x07\xa0\xe7\xe3\x13\xa1\xd8\x59\x75\x1c\xdf\x55\xfa\x05\x32\x23\xbd\x5f\xb3\x5a\xe6\xc8\x86\x34\x80\xf8\x14\x45\x10\x1a\xd0\x41\x14\xcd\xd9\xb3\xf2\x01\x9c\x1b\x82\xa0\x65\xfa\xfb\x57\xfc\xe3\x61\x90\x00\x07\x67\xbc\xe0\xc5\x72\x6e\xe6\x4a\xbf\x5c\xbc\x5f\x4a\x5d\x41\x66\x2b\xc2\x8a\x3e\x60\x19\x51\xf6\x7e\xdc\x83\x33\x0c\xb4\xea\x83\x9d\x6d\xcf\x07\xa9\xd3\x4d\x98\x00\x2b\x54\xf0\xfc\xf4\x28\x78\x7d\x01\xce\x71\xff\x2d\xc7\xad\x9d\x4e\x10\x3f\x3f\x3d\x6e\xc8\xe9\x2a\x87\xae\x63\xe9\x95\xa1\xbb\xb7\xd9\xab\x9c\xee\x04\x97\x29\xfc\x09\xc8\x56\xba\x1c\xe9\xbb\xed\x85\x74\xdd\xdf\x57\x96\x89\xf2\x4c\xf4\x2b\xf3\xb6\xd0\x1e\x1a\xe9\x61\xaf\x9d\x27\x90\x4a\xa1\x82\xd3\x09\xf6\xd6\x95\x92\x48\x97\x08\xf1\x7d\x9f\x64\xd7\x49\xf2\x35\x4a\x96\x51\x72\x0d\xcb\x9b\x55\xf2\x65\x95\xdc\xc0\xcf\xcd\x96\x41\xd7\xc5\x8b\x99\xe9\xcd\xfb\x0f\x04\x0e\x95\x76\x98\x91\x07\xb2\x40\x05\x82\xb1\x55\x1e\x98\x1c\x7a\x3f\xed\xd9\xd7\xb2\x9a\xd6\x39\x35\x84\xb5\xa6\xa3\x6a\xe8\x3a\xc1\x43\x51\xba\xb8\x10\x35\x9e\x6f\x6f\x2d\x7d\x68\x8f\x01\x3c\xbb\xca\xfd\xee\xe0\xb1\xbf\xb6\xcc\x68\x35\xdb\xfc\x5b\xef\xfa\xf8\xbd\x47\xe6\x50\xf0\xc1\xaf\x82\x87\x7f\x27\x5d\xfc\x0f\x00\x00\xff\xff\x2a\x83\x46\x9b\x67\x03\x00\x00")

func templatesPreviewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPreviewHtml,
		"templates/preview.html",
	)
}

func templatesPreviewHtml() (*asset, error) {
	bytes, err := templatesPreviewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/preview.html", size: 871, mode: os.FileMode(420), modTime: time.Unix(1461690198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/style.css": cssStyleCss,
	"templates/404.html": templates404Html,
	"templates/index.html": templatesIndexHtml,
	"templates/preview.html": templatesPreviewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{cssStyleCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{templates404Html, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"preview.html": &bintree{templatesPreviewHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

